package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"crypto/rand"
	"example/model"
	"fmt"
	"math/big"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	rand, _ := rand.Int(rand.Reader, big.NewInt(100))
	todo := &model.Todo{
		Text: input.Text,
		ID:   fmt.Sprintf("T%d", rand),
		User: &model.User{ID: input.UserID, Name: "user " + input.UserID},
	}
	r.todos = append(r.todos, todo)
	return todo, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	return r.todos, nil
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, input model.UserInput) (*model.UserInfo, error) {
	data, err := r.UserResolver.GetUser(ctx, input)
	if err != nil {
		return &model.UserInfo{}, fmt.Errorf("Error while fetching data", err)
	}
	response, err := mapInterfaceToUserInput(data)
	if err != nil {
		return &model.UserInfo{}, fmt.Errorf("Error while trnsforming response", err)
	}
	return response, err
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func mapInterfaceToUserInput(data interface{}) (*model.UserInfo, error) {
	userInput, ok := data.(map[string]interface{})
	if !ok {
		return &model.UserInfo{}, fmt.Errorf("invalid data type")
	}

	name, ok := userInput["name"].(string)
	if !ok {
		return &model.UserInfo{}, fmt.Errorf("invalid userRole value")
	}

	return &model.UserInfo{
		Name: name,
	}, nil
}
