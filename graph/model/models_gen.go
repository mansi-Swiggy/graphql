// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type NewTodo struct {
	Text   string `json:"text"`
	UserID string `json:"userId"`
}

type Todo struct {
	ID   string `json:"id"`
	Text string `json:"text"`
	Done bool   `json:"done"`
	User *User  `json:"user"`
}

// contain user info
type User struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type UserInfo struct {
	ID        int    `json:"id"`
	Name      string `json:"name"`
	Status    string `json:"status"`
	DeletedAt string `json:"deleted_at"`
	CreatedAt string `json:"created_at"`
	UpdatedAt string `json:"updated_at"`
}

type UserInput struct {
	UserRole string `json:"userRole"`
}

// Provides information on the state of User
type UserStatus string

const (
	UserStatusInvalid UserStatus = "INVALID"
	UserStatusNewUser UserStatus = "NEW_USER"
)

var AllUserStatus = []UserStatus{
	UserStatusInvalid,
	UserStatusNewUser,
}

func (e UserStatus) IsValid() bool {
	switch e {
	case UserStatusInvalid, UserStatusNewUser:
		return true
	}
	return false
}

func (e UserStatus) String() string {
	return string(e)
}

func (e *UserStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserStatus", str)
	}
	return nil
}

func (e UserStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
